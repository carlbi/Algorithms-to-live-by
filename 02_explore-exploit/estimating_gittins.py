import numpy as np
import time
from tqdm import tqdm
from random import shuffle, randint
from matplotlib import pyplot as plt

print("Explore/Exploit Problem")

# Parameters

N = 10000 # number of simulations
batch_size = 100
simulations = range(0, 10000, 100)
n = 5 # number of slot machines
m = 5 # number of pulls
d = 0.9 # discount parameter
table_range = (n,n)
gittins = np.array([[ 0.7028, 0.8001, 0.8452, 0.8723, 0.8905 ],
                    [ 0.5001, 0.6346, 0.7072, 0.7539, 0.7869 ],
                    [ 0.3796, 0.5163, 0.6010, 0.6579, 0.6996 ],
                    [ 0.3021, 0.4342, 0.5184, 0.5809, 0.6276 ],
                    [ 0.2488, 0.3720, 0.4561, 0.5179, 0.5676 ]])

# Simulation

p = np.random.rand(n,1)
rand_reward = np.zeros((N,1))
gitt_reward = np.zeros((N,1))
for simulation in tqdm(range(N)):
    # initialize random process
    rand_machine = randint(0,n-1)
    # initialize gittins process
    gitt_machine = randint(0,n-1)
    gitt_records = [[0,0]]*5
    gitt_indices = np.ones((n,1))*gittins[0,0]
    for pulls in range(m):
        # random
        #print("Random", rand_machine, p[rand_machine])
        draw = float(np.random.binomial(1, p[rand_machine], 1))
        rand_reward[simulation] += draw*(d**pulls)
        rand_machine = randint(0,n-1)
        # gittins
        #print("Gittings", gitt_machine, p[gitt_machine])
        draw = float(np.random.binomial(1, p[gitt_machine], 1))
        gitt_reward[simulation] += draw*(d**pulls)
        try:
            if draw: gitt_records[gitt_machine][0] += 1
            else: gitt_records[gitt_machine][1] += 1
            i,j = gitt_records[gitt_machine]
            gitt_indices[gitt_machine] = gittins[i,j]
            gitt_machine = np.argmin(gitt_indices)
        except:
            break
print("Done with {} simulations".format(N))

# Plotting

rand_reward_avg = np.zeros((int(N/batch_size),))
gitt_reward_avg = np.zeros((int(N/batch_size),))
for batch_idx in range(int(N/batch_size)):
    rand_reward_avg[batch_idx] = np.mean(rand_reward[batch_size*batch_idx:batch_size*(batch_idx+1)])
    gitt_reward_avg[batch_idx] = np.mean(gitt_reward[batch_size*batch_idx:batch_size*(batch_idx+1)])

x = simulations
y1 = rand_reward_avg
y2 = gitt_reward_avg

fig, ax = plt.subplots()
plt.plot(x, y1, 'r-', label="Averaged random reward")
plt.plot(x, y2, 'g-', label="Averaged gittings reward")
plt.title("Average reward for {} trials on {} machines".format(m,n))
plt.xlabel("Number of simulations")
plt.ylabel("Total reward")
ax.fill_between(x, y1, y2, where=y2 >= y1, facecolor='green', interpolate=True)
ax.fill_between(x, y1, y2, where=y2 <= y1, facecolor='red', interpolate=True)
plt.legend()
plt.show()
