import numpy as np
import time
from tqdm import tqdm
from random import shuffle, randint
from matplotlib import pyplot as plt

print("Explore/Exploit Problem")

# Parameters

N = 10000 # number of simulations
batch_size = 100
simulations = range(0, 10000, 100)
n = 5 # number of slot machines
m = 10 # number of pulls
opponents = 5 # number of random players
d = 0.9 # discount parameter
table_range = (n,n)
gittins = np.array([[ 0.7028, 0.8001, 0.8452, 0.8723, 0.8905, 0.9039, 0.9141, 0.9221, 0.9287, 0.9342 ],
                    [ 0.5001, 0.6346, 0.7072, 0.7539, 0.7869, 0.8115, 0.8307, 0.8461, 0.8588, 0.8695 ],
                    [ 0.3796, 0.5163, 0.6010, 0.6579, 0.6996, 0.7318, 0.7573, 0.7782, 0.7956, 0.8103 ],
                    [ 0.3021, 0.4342, 0.5184, 0.5809, 0.6276, 0.6642, 0.6940, 0.7187, 0.7396, 0.7573 ],
                    [ 0.2488, 0.3720, 0.4561, 0.5179, 0.5676, 0.6071, 0.6395, 0.6666, 0.6899, 0.7101 ],
                    [ 0.2103, 0.3245, 0.4058, 0.4677, 0.5168, 0.5581, 0.5923, 0.6212, 0.6461, 0.6677 ],
                    [ 0.1815, 0.2871, 0.3647, 0.4257, 0.4748, 0.5156, 0.5510, 0.5811, 0.6071, 0.6300 ],
                    [ 0.1591, 0.2569, 0.3308, 0.3900, 0.4387, 0.4795, 0.5144, 0.5454, 0.5723, 0.5960 ],
                    [ 0.1413, 0.2323, 0.3025, 0.3595, 0.4073, 0.4479, 0.4828, 0.5134, 0.5409, 0.5652 ],
                    [ 0.1269, 0.2116, 0.2784, 0.3332, 0.3799, 0.4200, 0.4548, 0.4853, 0.5125, 0.5373 ]])

# Simulation

p = np.random.rand(n,1)
rand_reward = np.zeros((N,1))
gitt_reward = np.zeros((N,1))
for simulation in tqdm(range(N)):
    # initialize gittins process
    gitt_machine = randint(0,n-1)
    gitt_records = [[0,0]]*5
    gitt_indices = np.ones((n,1))*gittins[0,0]
    # initialize random players
    rand_rewards = np.zeros((opponents, m))
    for pulls in range(m):
        for o in range(opponents):
            rand_machine = randint(0,n-1)
            draw = float(np.random.binomial(1, p[rand_machine], 1))
            rand_rewards[o][pulls] += draw*(d**pulls)
        # gittins
        #print("Gittings", gitt_machine, p[gitt_machine])
        draw = float(np.random.binomial(1, p[gitt_machine], 1))
        gitt_reward[simulation] += draw*(d**pulls)
        try:
            if draw: gitt_records[gitt_machine][0] += 1
            else: gitt_records[gitt_machine][1] += 1
            i,j = gitt_records[gitt_machine]
            gitt_indices[gitt_machine] = gittins[i,j]
            gitt_machine = np.argmin(gitt_indices)
        except:
            break
    # Choose best random player
    rand_reward[simulation] = float(np.max(sum(rand_rewards, 1)))
print("Done with {} simulations".format(N))

# Plotting

rand_reward_avg = np.zeros((int(N/batch_size),))
gitt_reward_avg = np.zeros((int(N/batch_size),))
for batch_idx in range(int(N/batch_size)):
    rand_reward_avg[batch_idx] = np.mean(rand_reward[batch_size*batch_idx:batch_size*(batch_idx+1)])
    gitt_reward_avg[batch_idx] = np.mean(gitt_reward[batch_size*batch_idx:batch_size*(batch_idx+1)])

x = simulations
y1 = rand_reward_avg
y2 = gitt_reward_avg

fig, ax = plt.subplots()
plt.plot(x, y1, 'r-', label="Averaged random reward")
plt.plot(x, y2, 'g-', label="Averaged gittings reward")
plt.title("Average reward for {} trials on {} machines".format(m,n))
plt.xlabel("Number of simulations")
plt.ylabel("Total reward")
ax.fill_between(x, y1, y2, where=y2 >= y1, facecolor='green', interpolate=True)
ax.fill_between(x, y1, y2, where=y2 <= y1, facecolor='red', interpolate=True)
plt.legend()
plt.show()
